// Auto-generated code. Do not edit.
namespace myTiles {
    //% fixedInstance jres blockIdentity=images._tile
    export const transparency16 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile1 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile2 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile3 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile4 = image.ofBuffer(hex``);
    //% fixedInstance jres blockIdentity=images._tile
    export const tile5 = image.ofBuffer(hex``);

    helpers._registerFactory("tilemap", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "level1":
            case "level1":return tiles.createTilemap(hex`46000aa`, img`
........................2.............................................
..........2..2.......2........2...........2........2.......2..........
....2............2.2..............2...2.......2........2........2.....
......2.......2......2..2..2.........2....2.....2..........2..........
...........2....2.............2..2................2...............2..2
........22.............................2.....2........2....2..2.......
............2......2...2..2.......2.....................2.............
..2..2.........2..............2..........2.2.....2.2........2......2..
......................................2........2................2.....
22222.................................................................
`, [myTiles.transparency16,sprites.builtin.forestTiles0,sprites.castle.tilePath2,sprites.swamp.swampTile0,sprites.swamp.swampTile1,sprites.swamp.swampTile2,sprites.builtin.forestTiles21,sprites.builtin.forestTiles23,myTiles.tile1,sprites.dungeon.collectibleBlueCrystal,sprites.dungeon.chestClosed], TileScale.Sixteen);
            case "level2":
            case "level2":return tiles.createTilemap(hex`32000a000000000000000000000000000000000000000000000000080000000000000000000000000000000000080000000800000800000008090808000000000300000800000000080000000003000000000000000000000000080003000000000000000000000000000405050600000800000000000300000000000000080000000000000008000000030000000000000008000000030000000000080808080000000000000000000000000000080000000008000008000000000000000008000000000000000000000a`, img`
..................................................
..........2............2..............2...........
..2222........2...................2...........2...
..................................................
....................2....2..2..........2.......222
.2.......2......2..................2........2.....
......2...............22.........2................
...2.........2....2...........2...................
......................................2...........
......2................2..........................
`, [myTiles.transparency16,myTiles.tile1,sprites.castle.tilePath2,sprites.builtin.forestTiles0,sprites.builtin.forestTiles21,sprites.builtin.forestTiles22,sprites.builtin.forestTiles23,sprites.swamp.swampTile3,sprites.dungeon.collectibleBlueCrystal,sprites.dungeon.collectibleRedCrystal,sprites.dungeon.chestClosed], TileScale.Sixteen);
        }
        return null;
    })

    helpers._registerFactory("tile", function(name: string) {
        switch(helpers.stringTrim(name)) {
            case "transparency16":return transparency16;
            case "myTile":
            case "tile1":return tile1;
            case "myTile0":
            case "tile2":return tile2;
            case "myTile1":
            case "tile3":return tile3;
            case "myTile2":
            case "tile4":return tile4;
            case "myTile3":
            case "tile5":return tile5;
        }
        return null;
    })

}
// Auto-generated code. Do not edit.
